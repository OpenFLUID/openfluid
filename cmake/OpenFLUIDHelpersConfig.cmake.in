##
#
#  This file is part of OpenFLUID software
#  Copyright(c) 2007, INRA - Montpellier SupAgro
#
#
# == GNU General Public License Usage ==
#
#  OpenFLUID is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  OpenFLUID is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with OpenFLUID. If not, see <http://www.gnu.org/licenses/>.
#
#
# == Other Usage ==
#
#  Other Usage means a use of OpenFLUID that is inconsistent with the GPL
#  license, and requires a written agreement between You and INRA.
#  Licensees for Other Usage of OpenFLUID may use this file in accordance
#  with the terms contained in the written agreement between You and INRA.
#  
##


CMAKE_MINIMUM_REQUIRED(VERSION 2.8.9)  

MESSAGE(STATUS "Found OpenFLUID helpers scripts")


###########################################################################

  
MACRO(_OPENFLUID_ADD_WARE_MESSAGES _WAREID _WARETYPE _WAREFILES _WARETARGET)
  MESSAGE(STATUS "***** ${_WARETYPE} ${_WAREID} *****")
  
  SET(_FILESMSG "  Files:")
  FOREACH(_WFILE ${_WAREFILES})
    SET(_FILESMSG "${_FILESMSG} ${_WFILE}")
  ENDFOREACH()

  MESSAGE(STATUS ${_FILESMSG})
  MESSAGE(STATUS "  Target: ${_WARETARGET}")

ENDMACRO()


###########################################################################


FUNCTION(OPENFLUID_SHOW_CMAKE_VARIABLES)
  GET_CMAKE_PROPERTY(_VARNAMES VARIABLES)
  FOREACH(_VARNAME ${_VARNAMES})
    
    STRING(LENGTH ${_VARNAME} _VARNAMELEN)    
    IF(_VARNAMELEN GREATER 9)
      STRING(SUBSTRING ${_VARNAME} 0 10 _MATCHEDVARNAME)
      IF(_MATCHEDVARNAME STREQUAL "OpenFLUID_")
        MESSAGE("${_VARNAME} = ${${_VARNAME}}")
      ENDIF()
    ENDIF()
    
  ENDFOREACH()
ENDFUNCTION()


###########################################################################


MACRO(OPENFLUID_DETECT_CXX11)
  
  INCLUDE(CheckCXXCompilerFlag)
  CHECK_CXX_COMPILER_FLAG("-std=c++11" COMPILER_SUPPORTS_CXX11)
  IF(COMPILER_SUPPORTS_CXX11)
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
  ELSE()
    CHECK_CXX_COMPILER_FLAG("-std=c++0x" COMPILER_SUPPORTS_CXX0X)
    IF(COMPILER_SUPPORTS_CXX0X)
      SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++0x")
    ELSE()
      MESSAGE(FATAL_ERROR "The compiler ${CMAKE_CXX_COMPILER} does not support C++11.")
    ENDIF()
  ENDIF()

ENDMACRO()


###########################################################################


# Macro for Qt detection, and automatic selection of Qt4 or Qt5
MACRO(OPENFLUID_FIND_QT)
  INCLUDE(${OpenFLUIDHelpers_DIR}/OpenFLUIDDetectQt.cmake)
ENDMACRO()


###########################################################################


MACRO(_OPENFLUID_WARE_BUILD _WARENAME _WARETYPE_STR)
  
  IF(${_WARENAME}_PARAMSUI_ENABLED)
     
    FIND_PACKAGE(OpenFLUID REQUIRED core base ware ui-ware ${${_WARENAME}_OPENFLUID_COMPONENTS})
    OPENFLUID_FIND_QT()
    
    SET(${_WARENAME}_CPP ${${_WARENAME}_CPP} ${${_WARENAME}_PARAMSUI_CPP})    
    SET(${_WARENAME}_FORTRAN ${${_WARENAME}_FORTRAN} ${${_WARENAME}_PARAMSUI_FORTRAN})
    
    SET(CMAKE_INCLUDE_CURRENT_DIR ON)
    QT4_WRAP_UI(_QT_WARE_UI ${${_WARENAME}_PARAMSUI_UI})
    QT4_ADD_RESOURCES(_QT_WARE_RC ${${_WARENAME}_PARAMSUI_RC})
    
    SET(${_WARENAME}_PARAMSUI_LIBS ${QT_QTCORE_LIBRARIES} ${QT_QTGUI_LIBRARIES})
    
    INCLUDE_DIRECTORIES(${QT_INCLUDES})
  
  ELSE()   
  
    FIND_PACKAGE(OpenFLUID REQUIRED core base ware ${${_WARENAME}_OPENFLUID_COMPONENTS})
    
    SET(${_WARENAME}_PARAMSUI_LIBS)
    
    SET(_QT_WARE_UI)
    SET(_QT_WARE_RC)
    
  ENDIF()

  IF(${_WARETYPE_STR} STREQUAL "sim")    
    SET(_WARE_FILENAME_SUFFIX ${OpenFLUID_SIMULATOR_FILENAME_SUFFIX})
    SET(_WARETYPE_LONGSTR "Simulator")
  ELSEIF(${_WARETYPE_STR} STREQUAL "obs")
    SET(_WARE_FILENAME_SUFFIX ${OpenFLUID_OBSERVER_FILENAME_SUFFIX})
    SET(_WARETYPE_LONGSTR "Observer")
  ELSEIF(${_WARETYPE_STR} STREQUAL "bext")
    SET(_WARE_FILENAME_SUFFIX ${OpenFLUID_BUILDEREXT_FILENAME_SUFFIX})
    SET(_WARETYPE_LONGSTR "OpenFLUID-Builder extension")
  ELSE()
    MESSAGE(FATAL_ERROR "Wrong ware type")
  ENDIF()

  IF(NOT ${_WARENAME}_SOURCE_DIR)
    SET(${_WARENAME}_SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR})
  ENDIF()  
  
  
  SET(${_WARENAME}_TARGET ${${_WARENAME}_ID}${_WARE_FILENAME_SUFFIX})

  _OPENFLUID_ADD_WARE_MESSAGES(${${_WARENAME}_ID} ${_WARETYPE_LONGSTR} "${${_WARENAME}_CPP}" ${${_WARENAME}_TARGET})

  IF(${_WARENAME}_FORTRAN)
    ENABLE_LANGUAGE(Fortran)
    SET(CMAKE_Fortran_FLAGS_RELEASE "-funroll-all-loops -fno-f2c -O3")
    SET(_FORTRAN_LINK_LIBS "gfortran")
  ENDIF()


  INCLUDE_DIRECTORIES(${OpenFLUID_INCLUDE_DIRS} ${${_WARENAME}_INCLUDE_DIRS})   
  LINK_DIRECTORIES(${OpenFLUID_LIBRARY_DIRS} ${${_WARENAME}_LIBRARY_DIRS})
  
  
  # ====== build ======
    
  IF(MINGW)
    # workaround for CMake bug with MinGW
      ADD_LIBRARY(${${_WARENAME}_TARGET} SHARED ${${_WARENAME}_CPP} ${_QT_WARE_UI} ${_QT_WARE_RC})
  ELSE()
      ADD_LIBRARY(${${_WARENAME}_TARGET} MODULE ${${_WARENAME}_CPP} ${_QT_WARE_UI} ${_QT_WARE_RC})
  ENDIF()

  SET_TARGET_PROPERTIES(${${_WARENAME}_TARGET} PROPERTIES PREFIX "" SUFFIX ${CMAKE_SHARED_LIBRARY_SUFFIX})

  IF(${_WARENAME}_PARAMSUI_ENABLED)
    SET_TARGET_PROPERTIES(${${_WARENAME}_TARGET} PROPERTIES COMPILE_DEFINITIONS "OPENFLUID_PARAMSUI_ENABLED"
                                                            AUTOMOC ON)
  ENDIF()

  TARGET_LINK_LIBRARIES(${${_WARENAME}_TARGET} ${OpenFLUID_LIBRARIES} ${${_WARENAME}_PARAMSUI_LIBS} ${${_WARENAME}_LINK_LIBS})
  
ENDMACRO()


###########################################################################


MACRO(_OPENFLUID_WARE_TESTS _WARENAME _SEARCH_CMD_SWITCH)

  IF(${_WARENAME}_TESTS_DATASETS)
  
    ENABLE_TESTING()
  
    SET(_TESTS_WARE_SEARCHPATHS "${PROJECT_BINARY_DIR}")
  
    IF (${_WARENAME}_TESTS_SEARCHPATHS)
      SET(_TESTS_WARE_SEARCHPATHS "${PROJECT_BINARY_DIR}" ${${_WARENAME}_TESTS_SEARCHPATHS})
    ENDIF()
    
    SET(_TESTS_OUTPUT_DIR ${PROJECT_BINARY_DIR}/tests-output)  
    FILE(MAKE_DIRECTORY "${_TESTS_OUTPUT_DIR}")
  
    FOREACH(_CURRTEST ${${_WARENAME}_TESTS_DATASETS})
      ADD_TEST(${${_WARENAME}_ID}-${_CURRTEST} 
               "${OpenFLUID_CMD_PROGRAM}" 
               "run"
               "${${_WARENAME}_SOURCE_DIR}/tests/${_CURRTEST}.IN"
               "${_TESTS_OUTPUT_DIR}/${_CURRTEST}.OUT"
               ${_SEARCH_CMD_SWITCH} "${_TESTS_WARE_SEARCHPATHS}")
      MESSAGE(STATUS "  Added test ${${_WARENAME}_ID}-${_CURRTEST}")                            
    ENDFOREACH()
  ENDIF()
   
ENDMACRO()


###########################################################################


MACRO(_OPENFLUID_WARE_INSTALL _WARENAME _WAREPLUGSDIR)

  # ====== install ======
  
  SET(_USERDATA_PATH "$ENV{HOME}/.@OPENFLUID_RELATIVEDIR@")
  IF(WIN32)
    SET(_USERDATA_PATH "$ENV{USERPROFILE}/@OPENFLUID_RELATIVEDIR@") 
  ENDIF()

  IF(DEFINED ENV{OPENFLUID_USERDATA_PATH})
    SET(_USERDATA_PATH "$ENV{OPENFLUID_USERDATA_PATH}")
  ENDIF()
  
  IF(NOT ${_WARENAME}_INSTALL_PATH)
    SET(_INSTALL_PATH "${_USERDATA_PATH}/@OPENFLUID_WARESBINDIR@/${_WAREPLUGSDIR}")
  ELSE()
    SET(_INSTALL_PATH "${${_WARENAME}_INSTALL_PATH}")   
  ENDIF()
  
  INSTALL(TARGETS ${${_WARENAME}_TARGET} DESTINATION "${_INSTALL_PATH}")
    
  MESSAGE(STATUS "  Install path : ${_INSTALL_PATH}")

ENDMACRO()



###########################################################################


# This macro uses the following variables
# _SIMNAME_ID : simulator ID
# _SIMNAME_CPP : list of C++ files. The sim2doc tag must be contained in the first one
# _SIMNAME_FORTRAN : list of Fortran files, if any
# _SIMNAME_DEFINITIONS : definitions to add at compile time
# _SIMNAME_INCLUDE_DIRS : directories to include for simulator compilation
# _SIMNAME_LIBRARY_DIRS : directories to link for simulator compilation
# _SIMNAME_LINK_LIBS : extra libraries to link for simulator build
# _SIMNAME_INSTALL_PATH : install path, replacing the default one
# _SIMNAME_SIM2DOC_DISABLED : set to 1 to disable sim2doc pdf build
# _SIMNAME_SIM2DOC_INSTALL_DISABLED : set to 1 to disable installation of sim2doc built pdf
# _SIMNAME_SIM2DOC_TPL : user-defined template for documentation
# _SIMNAME_TEST_DATASETS : list of datasets for tests

MACRO(OPENFLUID_ADD_SIMULATOR _SIMNAME)

  OPENFLUID_DETECT_CXX11()

  _OPENFLUID_WARE_BUILD(${_SIMNAME} "sim")
    
    
  # ====== doc ======  
  
  IF(NOT DEFINED ${_SIMNAME}_SIM2DOC_MODE)
    SET(${_SIMNAME}_SIM2DOC_MODE OFF)
  ENDIF()
  
  
  IF(${_SIMNAME}_SIM2DOC_MODE)
    FIND_PACKAGE(LATEX)
 
    IF(PDFLATEX_COMPILER)
  
      STRING(TOUPPER ${${_SIMNAME}_SIM2DOC_MODE} ${_SIMNAME}_SIM2DOC_MODE)
  
      LIST(GET ${_SIMNAME}_CPP 0 _CPP_FOR_DOC)
    
      IF(NOT ${_SIMNAME}_SIM2DOC_OUTPUT_PATH)
        SET(_DOCS_OUTPUT_PATH "${PROJECT_BINARY_DIR}")
      ELSE()
        SET(_DOCS_OUTPUT_PATH "${_SIMNAME}_SIM2DOC_OUTPUT_PATH")
      ENDIF()
    
      IF(${_SIMNAME}_SIM2DOC_TPL)
        SET (_TPL_OPTION ",tplfile=${${_SIMNAME}_SIM2DOC_TPL}")
      ENDIF()
    
      ADD_CUSTOM_COMMAND(
        OUTPUT "${_DOCS_OUTPUT_PATH}/${${_SIMNAME}_ID}.pdf"
        DEPENDS "${${_SIMNAME}_SOURCE_DIR}/${_CPP_FOR_DOC}"
        COMMAND "${OpenFLUID_CMD_PROGRAM}"
        ARGS "--buddy" "sim2doc" "--buddyopts" "inputcpp=${${_SIMNAME}_SOURCE_DIR}/${_CPP_FOR_DOC},outputdir=${_DOCS_OUTPUT_PATH},pdf=1${_TPL_OPTION}"     
      )
    
      IF(${${_SIMNAME}_SIM2DOC_MODE} STREQUAL "AUTO") 
        ADD_CUSTOM_TARGET(${${_SIMNAME}_ID}-doc ALL DEPENDS "${_DOCS_OUTPUT_PATH}/${${_SIMNAME}_ID}.pdf")
        MESSAGE(STATUS "  sim2doc : enabled (automatic)")
      ELSE()
        ADD_CUSTOM_TARGET(${${_SIMNAME}_ID}-doc DEPENDS "${_DOCS_OUTPUT_PATH}/${${_SIMNAME}_ID}.pdf")
        MESSAGE(STATUS "  sim2doc : enabled")
      ENDIF()  
    ELSE()
      MESSAGE(STATUS "  sim2doc : pdflatex not found")
    ENDIF()
  ELSE()
    MESSAGE(STATUS "  sim2doc : disabled")
  ENDIF()


  _OPENFLUID_WARE_TESTS(${_SIMNAME} "-p")

  
  _OPENFLUID_WARE_INSTALL(${_SIMNAME} @OPENFLUID_SIMPLUGSDIR@)
  
  IF(PDFLATEX_COMPILER AND ${${_SIMNAME}_SIM2DOC_MODE} STREQUAL "AUTO" AND NOT ${_SIMNAME}_SIM2DOC_INSTALL_DISABLED)
    INSTALL(FILES "${_DOCS_OUTPUT_PATH}/${${_SIMNAME}_ID}.pdf" DESTINATION "${_INSTALL_PATH}")
  ENDIF()
  
  
ENDMACRO()


###########################################################################


MACRO(OPENFLUID_ADD_DEFAULT_SIMULATOR)
  OPENFLUID_ADD_SIMULATOR(SIM)
ENDMACRO()


###########################################################################

# This macro uses the following variables
# _OBSNAME_ID : observer ID
# _OBSNAME_CPP : list of C++ files
# _OBSNAME_OPENFLUID_COMPONENTS : list of extra OpenFLUID components
# _OBSNAME_INCLUDE_DIRS : directories to include for observer compilation
# _OBSNAME_LIBRARY_DIRS : directories to link for observer compilation
# _OBSNAME_LINK_LIBS : extra libraries to link for observer build
# _OBSNAME_INSTALL_PATH : install path, replacing the default one
# _OBSNAME_TEST_DATASETS : list of datasets for tests
# _OBSNAME_PARAMSUI_ENABLED : flag for compilation of parameterization UI (ON or OFF)

MACRO(OPENFLUID_ADD_OBSERVER _OBSNAME)

  OPENFLUID_DETECT_CXX11()

  _OPENFLUID_WARE_BUILD(${_OBSNAME} "obs")
  
  _OPENFLUID_WARE_TESTS(${_OBSNAME} "-n")
  
  _OPENFLUID_WARE_INSTALL(${_OBSNAME} @OPENFLUID_OBSPLUGSDIR@)
  
ENDMACRO()


###########################################################################


MACRO(OPENFLUID_ADD_DEFAULT_OBSERVER)
  OPENFLUID_ADD_OBSERVER(OBS)
ENDMACRO()


###########################################################################


# This macro uses the following variables
# _EXTNAME_ID : extension ID
# _EXTNAME_CPP : list of C++ files.
# _EXTNAME_UI : list of Qt ui files
# _EXTNAME_RC : list of Qt rc files
# _EXTNAME_DEFINITIONS : definitions to add at compile time
# _EXTNAME_INCLUDE_DIRS : directories to include for extension compilation
# _EXTNAME_LIBRARY_DIRS : directories to link for extension compilation
# _EXTNAME_LINK_LIBS : extra libraries to link for extension build
# _EXTNAME_INSTALL_PATH : install path, replacing the default one

MACRO(OPENFLUID_ADD_BUILDEREXT _EXTNAME)

  OPENFLUID_DETECT_CXX11()

  SET(CMAKE_INCLUDE_CURRENT_DIR ON)

  FIND_PACKAGE(OpenFLUID REQUIRED core base tools ware builderext ${${_EXTNAME}_OPENFLUID_COMPONENTS})
  OPENFLUID_FIND_QT()  
  
  IF (NOT ${_EXTNAME}_SOURCE_DIR)
    SET(${_EXTNAME}_SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR})
  ENDIF()  
  
  SET(${_EXTNAME}_TARGET ${${_EXTNAME}_ID}${OpenFLUID_BUILDEREXT_FILENAME_SUFFIX})

  _OPENFLUID_ADD_WARE_MESSAGES(${${_EXTNAME}_ID} "OpenFLUID-Builder extension" "${${_EXTNAME}_CPP}" ${${_EXTNAME}_TARGET})

  ADD_DEFINITIONS(${${_EXTNAME}_DEFINITIONS})
  INCLUDE_DIRECTORIES(${OpenFLUID_INCLUDE_DIRS} ${QT_INCLUDES} ${${_EXTNAME}_INCLUDE_DIRS})
  LINK_DIRECTORIES(${OpenFLUID_LIBRARY_DIRS} ${${_EXTNAME}_LIBRARY_DIRS})
                    
  
  # ====== build ======
    
  QT4_WRAP_UI(_QT_EXT_UI ${${_EXTNAME}_UI})
  QT4_ADD_RESOURCES(_QT_EXT_RC ${${_EXTNAME}_RC})  
    
  IF(MINGW)
    # workaround for CMake bug with MinGW
    ADD_LIBRARY(${${_EXTNAME}_TARGET} SHARED ${${_EXTNAME}_CPP} ${_QT_EXT_UI} ${_QT_EXT_RC})
  ELSE()
    ADD_LIBRARY(${${_EXTNAME}_TARGET} MODULE ${${_EXTNAME}_CPP} ${_QT_EXT_UI} ${_QT_EXT_RC})
  ENDIF()
  
  SET_TARGET_PROPERTIES(${${_EXTNAME}_TARGET} PROPERTIES PREFIX "" SUFFIX ${CMAKE_SHARED_LIBRARY_SUFFIX}
                                                         AUTOMOC ON)

  TARGET_LINK_LIBRARIES(${${_EXTNAME}_TARGET} ${OpenFLUID_LIBRARIES}
                        ${QT_QTCORE_LIBRARIES} ${QT_QTGUI_LIBRARIES}
                        ${${_EXTNAME}_LINK_LIBS})
  

  # ====== install ======

  SET(_USERDATA_PATH "$ENV{HOME}/.@OPENFLUID_RELATIVEDIR@")
  IF(WIN32)
    SET(_USERDATA_PATH "$ENV{USERPROFILE}/@OPENFLUID_RELATIVEDIR@") 
  ENDIF()

  IF(DEFINED ENV{OPENFLUID_USERDATA_PATH})
    SET(_USERDATA_PATH "$ENV{OPENFLUID_USERDATA_PATH}")
  ENDIF()
  
  IF(NOT ${_EXTNAME}_INSTALL_PATH)
    SET(_INSTALL_PATH "${_USERDATA_PATH}/@OPENFLUID_WARESBINDIR@/@OPENFLUID_BEXTPLUGSDIR@")
  ELSE()
    SET(_INSTALL_PATH "${${_EXTNAME}_INSTALL_PATH}")   
  ENDIF()
  
  INSTALL(TARGETS ${${_EXTNAME}_TARGET} DESTINATION "${_INSTALL_PATH}")
  
  MESSAGE(STATUS "  Install path : ${_INSTALL_PATH}")
  
ENDMACRO()


###########################################################################


MACRO(OPENFLUID_ADD_DEFAULT_BUILDEREXT)
  OPENFLUID_ADD_BUILDEREXT(BEXT)
ENDMACRO()


###########################################################################


MACRO(OPENFLUID_ADD_TEST)

  SET(_ONEARGS_CMDS NAME)
  SET(_MANYARGS_CMDS COMMAND PRE_TEST POST_TEST)
  
  SET(_ADD_TEST)
  
  CMAKE_PARSE_ARGUMENTS(_ADD_TEST "" "${_ONEARGS_CMDS}" "${_MANYARGS_CMDS}" ${ARGN})
  
  ADD_TEST(NAME ${_ADD_TEST_NAME} COMMAND "${CMAKE_COMMAND}" "-E" "chdir" "${CMAKE_CURRENT_BINARY_DIR}"
                                             "${CMAKE_COMMAND}" 
                                               "-DCMD=${_ADD_TEST_COMMAND}"
                                               "-DPRECMDS=${_ADD_TEST_PRE_TEST}"
                                               "-DPOSTCMDS=${_ADD_TEST_POST_TEST}"
                                               "-P" "${OpenFLUID_DIR}/OpenFLUIDTestScript.cmake")
  
  # add env vars for tests if present
  
  GET_TEST_PROPERTY(${_ADD_TEST_NAME} ENVIRONMENT _TEST_ENVVARS)
  
  IF (DEFINED OPENFLUID_TESTS_TEMP_PATH)
    IF(_TEST_ENVVARS)
      SET(_TEST_ENVVARS "${_TEST_ENVVARS}\;OPENFLUID_TEMP_PATH=${OPENFLUID_TESTS_TEMP_PATH}")
    ELSE()
      SET(_TEST_ENVVARS "OPENFLUID_TEMP_PATH=${OPENFLUID_TESTS_TEMP_PATH}")
    ENDIF()      
  ENDIF()

  IF (DEFINED OPENFLUID_TESTS_USERDATA_PATH)
    IF(_TEST_ENVVARS)
      SET(_TEST_ENVVARS "${_TEST_ENVVARS}\;OPENFLUID_USERDATA_PATH=${OPENFLUID_TESTS_USERDATA_PATH}")
    ELSE()
      SET(_TEST_ENVVARS "OPENFLUID_USERDATA_PATH=${OPENFLUID_TESTS_USERDATA_PATH}")
    ENDIF()      
  ENDIF()

  SET_TESTS_PROPERTIES(${_ADD_TEST_NAME} 
                       PROPERTIES ENVIRONMENT ${_TEST_ENVVARS})      
                                                   
ENDMACRO()


###########################################################################


MACRO(OPENFLUID_ADD_GEOS_DEFINITIONS)
  STRING(COMPARE LESS ${GEOS_VERSION} "3.3.0" GEOS_VERSION_LESS_THAN_3_3_0)
  IF(GEOS_VERSION_LESS_THAN_3_3_0)
    SET(GEOS_VERSION_GREATER_OR_EQUAL_3_3_0  0)
  ELSE()
    SET(GEOS_VERSION_GREATER_OR_EQUAL_3_3_0  1)
  ENDIF()

  STRING(COMPARE LESS ${GEOS_VERSION} "3.3.2" GEOS_VERSION_LESS_THAN_3_3_2)
  IF(GEOS_VERSION_LESS_THAN_3_3_2)
    SET(GEOS_VERSION_GREATER_OR_EQUAL_3_3_2  0)
  ELSE()
    SET(GEOS_VERSION_GREATER_OR_EQUAL_3_3_2  1)
  ENDIF()
  
  ADD_DEFINITIONS(-DGEOS_VERSION_GREATER_OR_EQUAL_3_3_0=${GEOS_VERSION_GREATER_OR_EQUAL_3_3_0} -DGEOS_VERSION_GREATER_OR_EQUAL_3_3_2=${GEOS_VERSION_GREATER_OR_EQUAL_3_3_2})
ENDMACRO()  

