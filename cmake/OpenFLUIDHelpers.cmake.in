##
#
#  This file is part of OpenFLUID software
#  Copyright(c) 2007, INRA - Montpellier SupAgro
#
#
# == GNU General Public License Usage ==
#
#  OpenFLUID is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  OpenFLUID is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with OpenFLUID. If not, see <http://www.gnu.org/licenses/>.
#
#
# == Other Usage ==
#
#  Other Usage means a use of OpenFLUID that is inconsistent with the GPL
#  license, and requires a written agreement between You and INRA.
#  Licensees for Other Usage of OpenFLUID may use this file in accordance
#  with the terms contained in the written agreement between You and INRA.
#
##


CMAKE_MINIMUM_REQUIRED(VERSION 3.10)

ENABLE_TESTING()


###########################################################################


FUNCTION(OPENFLUID_SHOW_CMAKE_VARIABLES)
  GET_CMAKE_PROPERTY(_VARNAMES VARIABLES)
  FOREACH(_VARNAME ${_VARNAMES})

    STRING(LENGTH ${_VARNAME} _VARNAMELEN)
    IF(_VARNAMELEN GREATER 9)
      STRING(SUBSTRING ${_VARNAME} 0 10 _MATCHEDVARNAME)
      IF(_MATCHEDVARNAME STREQUAL "OpenFLUID_")
        MESSAGE("${_VARNAME} = ${${_VARNAME}}")
      ENDIF()
    ENDIF()

  ENDFOREACH()
ENDFUNCTION()


###########################################################################


# TOIMPL create OPENFLUID_DETECT_CXXSTD which calls the current macro below

MACRO(OPENFLUID_DETECT_CXX17)
  SET(CMAKE_CXX_STANDARD @OFBUILD_CXX_STANDARD@)
  SET(CMAKE_CXX_STANDARD_REQUIRED ON)
  SET(CMAKE_CXX_EXTENSIONS OFF)
ENDMACRO()


# Macro for CXX11 compatibility - deprecated
MACRO(OPENFLUID_DETECT_CXX14)
  MESSAGE(WARNING "OPENFLUID_DETECT_CXX14() is deprecated, use OPENFLUID_DETECT_CXX17() instead")
  OPENFLUID_DETECT_CXX17()
ENDMACRO()


# Macro for CXX11 compatibility - deprecated
MACRO(OPENFLUID_DETECT_CXX11)
  MESSAGE(WARNING "OPENFLUID_DETECT_CXX11() is deprecated, use OPENFLUID_DETECT_CXX17() instead")
  OPENFLUID_DETECT_CXX17()
ENDMACRO()

###########################################################################


# Macro for Qt detection - deprecated
MACRO(OPENFLUID_FIND_QT)
  MESSAGE(WARNING "The OPENFLUID_FIND_QT() macro is fully functional but deprecated."
                  "See file ${OpenFLUID_DIR}/OpenFLUIDDetectQt.cmake for more informations.")
  INCLUDE(${OpenFLUID_DIR}/OpenFLUIDDetectQt.cmake)
ENDMACRO()


###########################################################################


# Macro for checking and displaying GDAL version
MACRO(OPENFLUID_CHECK_GDAL_VERSION)

  IF(NOT GDAL_INCLUDE_DIR)
    MESSAGE(FATAL_ERROR "Error checking GDAL version: GDAL_INCLUDE_DIR variable is not set")
  ENDIF()

  FILE(STRINGS "${GDAL_INCLUDE_DIR}/gdal_version.h" _GDAL_VERSION_CONFIG_LINE REGEX "#[\ ]*define[\ ]+GDAL_RELEASE_NAME")

  STRING(REGEX MATCH "[0-9]+.[0-9]+.[0-9]+(~[a-z]+[0-9]*)?" GDAL_VERSION "${_GDAL_VERSION_CONFIG_LINE}")

  MESSAGE(STATUS "GDAL version : ${GDAL_VERSION}")

ENDMACRO()



###########################################################################


FUNCTION(OPENFLUID_ADD_TEST)

  SET(_ONEARGS_CMDS NAME)
  SET(_MANYARGS_CMDS COMMAND PRE_TEST POST_TEST)

  SET(_ADD_TEST)

  CMAKE_PARSE_ARGUMENTS(_ADD_TEST "" "${_ONEARGS_CMDS}" "${_MANYARGS_CMDS}" ${ARGN})

  ADD_TEST(NAME ${_ADD_TEST_NAME} COMMAND "${CMAKE_COMMAND}" "-E" "chdir" "${CMAKE_CURRENT_BINARY_DIR}"
                                          "${CMAKE_COMMAND}"
                                          "-DCMD=${_ADD_TEST_COMMAND}"
                                          "-DPRECMDS=${_ADD_TEST_PRE_TEST}"
                                          "-DPOSTCMDS=${_ADD_TEST_POST_TEST}"
                                          "-P" "${OpenFLUID_DIR}/OpenFLUIDTestScript.cmake")

  # add env vars for tests if present

  GET_TEST_PROPERTY(${_ADD_TEST_NAME} ENVIRONMENT _TEST_ENVVARS)

  IF (DEFINED OPENFLUID_TESTS_TEMP_PATH)
    IF(_TEST_ENVVARS)
      SET(_TEST_ENVVARS "${_TEST_ENVVARS}\;OPENFLUID_TEMP_PATH=${OPENFLUID_TESTS_TEMP_PATH}")
    ELSE()
      SET(_TEST_ENVVARS "OPENFLUID_TEMP_PATH=${OPENFLUID_TESTS_TEMP_PATH}")
    ENDIF()
  ENDIF()

  IF (DEFINED OPENFLUID_TESTS_USERDATA_PATH)
    IF(_TEST_ENVVARS)
      SET(_TEST_ENVVARS "${_TEST_ENVVARS}\;OPENFLUID_USERDATA_PATH=${OPENFLUID_TESTS_USERDATA_PATH}")
    ELSE()
      SET(_TEST_ENVVARS "OPENFLUID_USERDATA_PATH=${OPENFLUID_TESTS_USERDATA_PATH}")
    ENDIF()
  ENDIF()

  #  log path
  IF(_TEST_ENVVARS)
    SET(_TEST_ENVVARS "${_TEST_ENVVARS}\;OPENFLUID_LOG_PATH=${OFBUILD_TESTS_OUTPUT_DATA_DIR}")
  ELSE()
    SET(_TEST_ENVVARS "OPENFLUID_LOG_PATH=${OFBUILD_TESTS_OUTPUT_DATA_DIR}")
  ENDIF()
  

  SET_TESTS_PROPERTIES(${_ADD_TEST_NAME}
                       PROPERTIES ENVIRONMENT ${_TEST_ENVVARS})

ENDFUNCTION()


###########################################################################


FUNCTION(_OPENFLUID_WAREPLUGIN_BUILD)

  # Initialization
  SET(_OPNFLD_OPENFLUID_COMPONENTS core base ware)
  SET(_OPNFLD_QT_REQUIRED OFF)
  SET(_OPNFLD_QT_WARE_UI)
  SET(_OPNFLD_QT_WARE_RC)
  SET(_OPNFLD_CPPSIGN_FILE @OPENFLUID_WARESDEV_BUILD_MAINSIGN@)
  SET(_OPNFLD_CMAKEINFO_FILE @OPENFLUID_WARESDEV_BUILD_MAININFO@)


  # Force build type to Debug if not set
  IF(NOT CMAKE_BUILD_TYPE)
    SET(CMAKE_BUILD_TYPE "Debug")
  ENDIF()

  # Run info2build if not already done
  IF (NOT _FORCE_PARAMSUI)
    SET(_SRC_PATH ${CMAKE_SOURCE_DIR})
    IF (${_BUILDARGS_CONFIGURED_SIGNATURE})
      SET(_META_PATH "${CMAKE_SOURCE_DIR}/@OPENFLUID_WARESDEV_WAREMETA_FILE@")
      MESSAGE(STATUS "Signature configured")
      CONFIGURE_FILE(${_META_PATH} "${CMAKE_BINARY_DIR}/@OPENFLUID_WARESDEV_WAREMETA_FILE@")
      SET(_SRC_PATH ${CMAKE_BINARY_DIR})
    ENDIF()
    EXECUTE_PROCESS(COMMAND "${OpenFLUID_CMD_PROGRAM}" "info2build"
                            "--src-path=${_SRC_PATH}" "--dest-path=${CMAKE_BINARY_DIR}"
                    RESULT_VARIABLE _WAREINFO_RESULT
                    OUTPUT_VARIABLE _WAREINFO_OUTPUT)
    IF(_WAREINFO_RESULT AND NOT _WAREINFO_RESULT EQUAL 0)
      MESSAGE(FATAL_ERROR "Error processing @OPENFLUID_WARESDEV_WAREMETA_FILE@ file" "\n" ${_WAREINFO_OUTPUT})
    ENDIF()
  ENDIF()

  # Update signature file name if building params UI
  IF (_FORCE_PARAMSUI)
    SET(_OPNFLD_CPPSIGN_FILE @OPENFLUID_WARESDEV_BUILD_PARAMSUISIGN@)
    SET(_OPNFLD_CMAKEINFO_FILE @OPENFLUID_WARESDEV_BUILD_PARAMSUIINFO@)
  ENDIF()

  # Include CMake file generated by info2build
  INCLUDE("${CMAKE_BINARY_DIR}/${_OPNFLD_CMAKEINFO_FILE}")

  # Set information depending on ware type
  IF(WARE_IS_SIMULATOR)
    SET(_OPNFLD_WARETYPE_SUBDIR @OPENFLUID_SIMULATORS_PATH@)
    SET(_OPNFLD_WARE_FILENAME_SUFFIX ${OpenFLUID_SIMULATOR_FILENAME_SUFFIX})
  ELSEIF(WARE_IS_OBSERVER)
    SET(_OPNFLD_WARETYPE_SUBDIR @OPENFLUID_OBSERVERS_PATH@)
    SET(_OPNFLD_WARE_FILENAME_SUFFIX ${OpenFLUID_OBSERVER_FILENAME_SUFFIX})
  ELSEIF(WARE_IS_BUILDEREXT)
    SET(_OPNFLD_WARETYPE_SUBDIR @OPENFLUID_BUILDEREXTS_PATH@)
    SET(_OPNFLD_WARE_FILENAME_SUFFIX ${OpenFLUID_BUILDEREXT_FILENAME_SUFFIX})
  ELSE()
    MESSAGE(FATAL_ERROR "Wrong ware type")
  ENDIF()

  # Update components when building a builderext
  IF(WARE_IS_BUILDEREXT OR _FORCE_PARAMSUI)
    SET(_OPNFLD_QT_REQUIRED ON)
    SET(_OPNFLD_OPENFLUID_COMPONENTS ${_OPNFLD_OPENFLUID_COMPONENTS} ui-builderext)
  ENDIF()
  SET(_OPNFLD_OPENFLUID_COMPONENTS ${_OPNFLD_OPENFLUID_COMPONENTS} ${_BUILDARGS_OPENFLUID_COMPONENTS})


  OPENFLUID_DETECT_CXX17()

  IF(_OPNFLD_QT_REQUIRED)
#    SET(CMAKE_INCLUDE_CURRENT_DIR ON)

    FIND_PACKAGE(Qt6 COMPONENTS Core Widgets Gui QUIET)
    IF (NOT Qt6_FOUND)
      FIND_PACKAGE(Qt5 COMPONENTS Core Widgets REQUIRED)
      MESSAGE(STATUS "Found Qt5 (version ${Qt5_VERSION})")
      #    QT5_WRAP_UI(_QT_WRAPPED_UI ${_BUILDARGS_UI_FILES})
      #    QT5_ADD_RESOURCES(_QT_ADDED_RC ${_BUILDARGS_RC_FILES})
      #    SET(_QT_PREPARED_UIRC ${_QT_WRAPPED_UI} ${_QT_ADDED_RC})
      set_property(DIRECTORY PROPERTY QT_VERSION_MAJOR ${Qt5Core_VERSION_MAJOR})
      set_property(DIRECTORY PROPERTY QT_VERSION_MINOR ${Qt5Core_VERSION_MINOR})    
      set_property(DIRECTORY PROPERTY QT_VERSION ${Qt5Core_VERSION})    
    ELSE()
      MESSAGE(STATUS "Found Qt6 (version ${Qt6_VERSION})")
      set_property(DIRECTORY PROPERTY QT_VERSION_MAJOR ${Qt6Core_VERSION_MAJOR})
      set_property(DIRECTORY PROPERTY QT_VERSION_MINOR ${Qt6Core_VERSION_MINOR})    
      set_property(DIRECTORY PROPERTY QT_VERSION ${Qt6Core_VERSION})    
    ENDIF()

  ENDIF()

  FIND_PACKAGE(OpenFLUID REQUIRED ${_OPNFLD_OPENFLUID_COMPONENTS})


  SET(_OPNFLD_USERDATA_PATH "$ENV{HOME}/.@OPENFLUID_RELATIVE_PATH@")
  IF(WIN32)
    SET(_OPNFLD_USERDATA_PATH "$ENV{USERPROFILE}/@OPENFLUID_RELATIVE_PATH@")
  ENDIF()

  IF(DEFINED ENV{OPENFLUID_USERDATA_PATH})
    SET(_OPNFLD_USERDATA_PATH "$ENV{OPENFLUID_USERDATA_PATH}")
  ENDIF()

  # Determine install PATH
  IF(WARE_INSTALL_PATH)
    SET(_OPNFLD_INSTALL_PATH "${WARE_INSTALL_PATH}")  
  ELSEIF(WARES_PREFIX_INSTALL_PATH)
    SET(_OPNFLD_INSTALL_PATH "${WARES_PREFIX_INSTALL_PATH}/${_OPNFLD_WARETYPE_SUBDIR}")
  ELSEIF(_BUILDARGS_INSTALL_PATH)
    SET(_OPNFLD_INSTALL_PATH "${_BUILDARGS_INSTALL_PATH}")
  ELSE()
    SET(_OPNFLD_INSTALL_PATH "${_OPNFLD_USERDATA_PATH}/@OPENFLUID_WARESBIN_PATH@/${_OPNFLD_WARETYPE_SUBDIR}")
  ENDIF()

  IF(OPENFLUID_CURRENT_WORKSPACE_PATH)
    MESSAGE(STATUS "Found current OpenFLUID workspace path: ${OPENFLUID_CURRENT_WORKSPACE_PATH}")
  ENDIF()


  SET(_ADDING_TEXT "${WARE_TYPE} ${WARE_ID}")
  IF(_FORCE_PARAMSUI)
    SET(_ADDING_TEXT "parameterization UI")
  ENDIF()
  MESSAGE(STATUS "Adding ${_ADDING_TEXT}")
  MESSAGE(STATUS "  Mode: ${CMAKE_BUILD_TYPE}")

  IF(NOT WARE_SOURCE_DIR)
    SET(WARE_SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR})
  ENDIF()

  SET(_WARE_TARGET ${_BUILDARGS_TARGET})
  IF (NOT _WARE_TARGET)
    SET(_WARE_TARGET ${WARE_ID})
  ENDIF()

  IF(_BUILDARGS_FORTRAN_FILES)
    INCLUDE(CheckLanguage)
    CHECK_LANGUAGE(Fortran)
    IF(CMAKE_Fortran_COMPILER)
      ENABLE_LANGUAGE(Fortran)
      SET(CMAKE_Fortran_FLAGS_RELEASE "-funroll-all-loops -fno-f2c -O3")
      SET(_FORTRAN_LINK_LIBS "gfortran")
    ELSE()
      MESSAGE(FATAL_ERROR "No Fortran support found")
    ENDIF()
  ENDIF()


  SET(_OPNFLD_SRC_FILES ${_BUILDARGS_CPP_FILES} ${_BUILDARGS_FORTRAN_FILES})
  SET(_OPNFLD_UIRC_FILES ${_BUILDARGS_UI_FILES} ${_BUILDARGS_RC_FILES})

  SET(_TEMP_SRC_STR)
  FOREACH(_SRC_FILE ${_OPNFLD_SRC_FILES})
    SET(_TEMP_SRC_STR "${_TEMP_SRC_STR}${_SRC_FILE} ")
  ENDFOREACH()
  MESSAGE(STATUS "  Sources files: ${_TEMP_SRC_STR}")

  IF (_OPNFLD_UIRC_FILES)
    SET(_TEMP_UIRC_STR)
    FOREACH(_UIRC_FILE ${_OPNFLD_UIRC_FILES})
      SET(_TEMP_UIRC_STR "${_TEMP_UIRC_STR}${_UIRC_FILE} ")
    ENDFOREACH()
    MESSAGE(STATUS "  Resources files: ${_TEMP_UIRC_STR}")
  ENDIF()
  MESSAGE(STATUS "  Target: ${_WARE_TARGET}")

  SET(_ALL_SRC_FILES "${CMAKE_BINARY_DIR}/${_OPNFLD_CPPSIGN_FILE}" ${_OPNFLD_SRC_FILES} ${_OPNFLD_UIRC_FILES})


  ADD_LIBRARY(${_WARE_TARGET} MODULE ${_ALL_SRC_FILES})
  IF(MINGW)
    # TOIMPL check if still necessary
    # workaround for CMake bug with MinGW
    SET_TARGET_PROPERTIES(${_WARE_TARGET} PROPERTIES LINK_FLAGS "-shared")
  ENDIF()


  # Adding directory of fragments inside the ware src
  SET(_OPNFLD_FRAGMENTS_PATHS "@OPENFLUID_FRAGMENTS_PATH@")

  # Adding directory of fragments at workspace level (if workspace found)
  IF(OPENFLUID_CURRENT_WORKSPACE_PATH)
    SET(_OPNFLD_FRAGMENTS_PATHS ${_OPNFLD_FRAGMENTS_PATHS}
                                "${OPENFLUID_CURRENT_WORKSPACE_PATH}/@OPENFLUID_WARESDEV_PATH@/@OPENFLUID_FRAGMENTS_PATH@")
  ENDIF()

  # Adding directory of fragments at userdata level
  SET(_OPNFLD_FRAGMENTS_PATHS ${_OPNFLD_FRAGMENTS_PATHS}
                              "${_OPNFLD_USERDATA_PATH}/@OPENFLUID_USERSHARED_PATH@/@OPENFLUID_FRAGMENTS_PATH@")


  SET_TARGET_PROPERTIES(${_WARE_TARGET} PROPERTIES
                        PREFIX "" SUFFIX ${CMAKE_SHARED_LIBRARY_SUFFIX}
                        OUTPUT_NAME ${WARE_ID}${_OPNFLD_WARE_FILENAME_SUFFIX}
                        LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR})


  TARGET_INCLUDE_DIRECTORIES(${_WARE_TARGET}
                             PRIVATE ${_OPNFLD_FRAGMENTS_PATHS} ${WARE_INCLUDE_DIRS}
                                     ${OpenFLUID_INCLUDE_DIRS} ${CMAKE_CURRENT_BINARY_DIR} ${CMAKE_CURRENT_SOURCE_DIR})
  LINK_DIRECTORIES(${WARE_LIBRARY_DIRS} ${OpenFLUID_LIBRARY_DIRS} ${CMAKE_CURRENT_BINARY_DIR}) # TODO replace with TARGET_LINK_DIRECTORY when minimal required CMake version will be >= 3.13

  IF(_OPNFLD_QT_REQUIRED)
    SET_TARGET_PROPERTIES(${_WARE_TARGET} PROPERTIES AUTOMOC ON)
    SET_TARGET_PROPERTIES(${_WARE_TARGET} PROPERTIES AUTOUIC ON)
    SET_TARGET_PROPERTIES(${_WARE_TARGET} PROPERTIES AUTORCC ON)
    IF (NOT Qt6_FOUND)
      TARGET_LINK_LIBRARIES(${_WARE_TARGET} PUBLIC Qt5::Core Qt5::Widgets)
    ELSE()
      TARGET_LINK_LIBRARIES(${_WARE_TARGET} PUBLIC Qt6::Core Qt6::Widgets)
    ENDIF()
  ENDIF()

  TARGET_LINK_LIBRARIES(${_WARE_TARGET}
                        PRIVATE ${OpenFLUID_LIBRARIES} ${WARE_LINK_LIBS} ${_FORTRAN_LINK_LIBS})

  IF(NOT CMAKE_BUILD_TYPE)
    SET(CMAKE_BUILD_TYPE "Debug")
  ENDIF()
  STRING(TOUPPER ${CMAKE_BUILD_TYPE} _WAREBUILD_BUILD_TYPE)

  STRING(REPLACE ";" " " _WAREBUILD_CXX_FLAGS "${CMAKE_CXX_FLAGS};${CMAKE_CXX_FLAGS_${_WAREBUILD_BUILD_TYPE}}")
  TARGET_COMPILE_DEFINITIONS(${_WARE_TARGET} PRIVATE
                             WAREBUILD_BUILD_TYPE="${_WAREBUILD_BUILD_TYPE}"
                             WAREBUILD_COMPILER_ID="${CMAKE_CXX_COMPILER_ID}"
                             WAREBUILD_COMPILER_VERSION="${CMAKE_CXX_COMPILER_VERSION}"
                             WAREBUILD_COMPILATION_FLAGS="${_WAREBUILD_CXX_FLAGS}")

  TARGET_COMPILE_DEFINITIONS(${_WARE_TARGET} PRIVATE
                             WARE_LINKUID="${WARE_LINKUID}"
                             WARE_ID="${WARE_ID}")


  MESSAGE(STATUS "  Install path: ${_OPNFLD_INSTALL_PATH}")

  INSTALL(TARGETS ${_WARE_TARGET} DESTINATION "${_OPNFLD_INSTALL_PATH}")


  # ================
  # docalyzer
  # ================

  IF (NOT _FORCE_PARAMSUI)
    # TODO manage --format and --keep-data options 

    MESSAGE(STATUS "Adding docalyze target")

    FILE(GLOB_RECURSE _DOCFILES_DEPENDS "${CMAKE_SOURCE_DIR}/@OPENFLUID_WARESDEV_DOC_DIR@/*")

    SET(_SRC_PATH ${CMAKE_SOURCE_DIR})
    IF (${_BUILDARGS_CONFIGURED_SIGNATURE})
      SET(_META_PATH "${CMAKE_SOURCE_DIR}/@OPENFLUID_WARESDEV_WAREMETA_FILE@")
      MESSAGE(STATUS "Signature configured")
      CONFIGURE_FILE(${_META_PATH} "${CMAKE_BINARY_DIR}/@OPENFLUID_WARESDEV_WAREMETA_FILE@")
      SET(_README_PATH "${CMAKE_SOURCE_DIR}/README") #TODO factorize list of doc sources
      IF(EXISTS ${_README_PATH})
        CONFIGURE_FILE(${_README_PATH} "${CMAKE_BINARY_DIR}/README")
      ENDIF()
      SET(_README_PATH "${CMAKE_SOURCE_DIR}/README.md")
      IF(EXISTS ${_README_PATH})
        CONFIGURE_FILE(${_README_PATH} "${CMAKE_BINARY_DIR}/README.md")
      ENDIF()
      FILE(COPY "${CMAKE_SOURCE_DIR}/doc" DESTINATION "${CMAKE_BINARY_DIR}")
      SET(_SRC_PATH ${CMAKE_BINARY_DIR})
    ENDIF()

    ADD_CUSTOM_COMMAND(COMMAND "${OpenFLUID_CMD_PROGRAM}" "docalyze"
                       ARGS "--src-path=${_SRC_PATH}" "--output-path=${CMAKE_BINARY_DIR}"
                       DEPENDS ${_DOCFILES_DEPENDS}
                       OUTPUT "${CMAKE_BINARY_DIR}/${WARE_ID}.pdf")

    ADD_CUSTOM_TARGET(docalyze
                      WORKING_DIRECTORY ${CMAKE_BINARY_DIR}
                      DEPENDS "${CMAKE_BINARY_DIR}/${WARE_ID}.pdf"
                      COMMENT "Docalyzing...")

    ADD_CUSTOM_TARGET(docalyze-install
                      COMMAND "${CMAKE_COMMAND}" "-E" "copy" 
                              "${CMAKE_BINARY_DIR}/${WARE_ID}.pdf" "${_OPNFLD_INSTALL_PATH}/${WARE_ID}.pdf"
                      WORKING_DIRECTORY ${CMAKE_BINARY_DIR}
                      DEPENDS "${CMAKE_BINARY_DIR}/${WARE_ID}.pdf"
                      COMMENT "Docalyzing and installing...")
  ENDIF()


  # ================
  # i18n
  # ================


  IF(_BUILDARGS_I18N_LANGS)

    # ====== update ======

    IF (QT_VERSION_MAJOR LESS 6)
      FIND_PROGRAM(_LUPDATE_EXECUTABLE NAMES lupdate lupdate-qt5)
    ELSE()
      FIND_PACKAGE(Qt6 COMPONENTS LinguistTools)
      SET(_LUPDATE_EXECUTABLE lupdate)
    ENDIF()

    IF(_LUPDATE_EXECUTABLE)

      ADD_CUSTOM_TARGET(update-translations-strings)

      FOREACH(_LANG ${_BUILDARGS_I18N_LANGS})

        SET(_LANG_TSFILE ${CMAKE_CURRENT_SOURCE_DIR}/${WARE_ID}-${_LANG}.ts)

        ADD_CUSTOM_TARGET(update-translation-strings-${_LANG}
                          COMMENT "Updating ${_LANG} translation strings for ${${_WARENAME}_ID}"
                          COMMAND ${_LUPDATE_EXECUTABLE}
                                  "${CMAKE_CURRENT_SOURCE_DIR}"
                                  "-I" "${CMAKE_CURRENT_SOURCE_DIR}"
                                  "-ts" ${_LANG_TSFILE})

        ADD_DEPENDENCIES(update-translations-strings update-translation-strings-${_LANG})

      ENDFOREACH()
    ELSE()
      MESSAGE(STATUS "  Unable to add target for translations (lupdate not found)")
    ENDIF()


    # ====== release ======

    IF (QT_VERSION_MAJOR LESS 6)
      FIND_PROGRAM(_LRELEASE_EXECUTABLE NAMES lrelease lrelease-qt5)
    ELSE()
      FIND_PACKAGE(Qt6 COMPONENTS LinguistTools)
      SET(_LRELEASE_EXECUTABLE lrelease)
    ENDIF()

    IF(_LRELEASE_EXECUTABLE)

      ADD_CUSTOM_TARGET(release-translations ALL)

      SET (_ALL_LANGS)

      FOREACH(_LANG ${_BUILDARGS_I18N_LANGS})

        SET(_LANG_TSFILE ${CMAKE_CURRENT_SOURCE_DIR}/${WARE_ID}-${_LANG}.ts)
        SET(_LANG_QMFILE ${CMAKE_CURRENT_BINARY_DIR}/${WARE_ID}${_OPNFLD_WARE_FILENAME_SUFFIX}-${_LANG}.qm)

        ADD_CUSTOM_COMMAND(DEPENDS ${_LANG_TSFILE}
                           COMMAND ${_LRELEASE_EXECUTABLE}
                                   ${_LANG_TSFILE}
                                   "-qm" ${_LANG_QMFILE}
                            OUTPUT ${_LANG_QMFILE})

        ADD_CUSTOM_TARGET(release-translations-${_LANG}
                          COMMENT "Releasing ${_LANG} translation for ${WARE_ID}"
                          DEPENDS ${_LANG_QMFILE})

        ADD_DEPENDENCIES(release-translations release-translations-${_LANG})

        SET (_ALL_LANGS "${_ALL_LANGS}${_LANG} ")


        INSTALL(FILES "${_LANG_QMFILE}" DESTINATION "${_OPNFLD_INSTALL_PATH}")

      ENDFOREACH()

      MESSAGE(STATUS "  Registered translations: ${_ALL_LANGS}")

    ELSE()
      MESSAGE(STATUS "  Unable to register translations (lrelease not found)")
    ENDIF()
  ENDIF()

ENDFUNCTION()


###########################################################################


# TOIMPL write doc (parameters, context variables if any, ...))
# WARE_DEFINITIONS : definitions to add at compile time
# WARE_INCLUDE_DIRS : directories to include headers
# WARE_LIBRARY_DIRS : directories for linking extra libraries
# WARE_LINK_LIBS : extra libraries to link
# WARE_WITH_PARAMSUI : forced build of params UI if any (overrides WITH_PARAMSUI arg)
# WARE_INSTALL_PATH : forced install path (overrides default install path)
# WARES_PREFIX_INSTALL_PATH : forced prefix install path (overrides default install path, overriden by WARE_INSTALL_PATH)
# WARES_PREFIX_INSTALL_PATH : forced prefix install path (overrides default install path, overriden by WARE_INSTALL_PATH)
FUNCTION(OPENFLUID_ADD_WAREPLUGIN)
  SET(_ARGS_OPTIONS "")
  SET(_ARGS_ONEVAL "INSTALL_PATH;TARGET;CONFIGURED_SIGNATURE;WITH_PARAMSUI;PARAMSUI_INSTALL_PATH;PARAMSUI_TARGET")
  SET(_ARGS_MULTIVAL "CPP_FILES;FORTRAN_FILES;UI_FILES;RC_FILES;OPENFLUID_COMPONENTS;I18N_LANGS;PARAMSUI_CPP_FILES;PARAMSUI_UI_FILES;PARAMSUI_RC_FILES;PARAMSUI_I18N_LANGS;PARAMSUI_OPENFLUID_COMPONENTS")
  CMAKE_PARSE_ARGUMENTS(_BUILDARGS "${_ARGS_OPTIONS}" "${_ARGS_ONEVAL}" "${_ARGS_MULTIVAL}" ${ARGN})

  # TOIMPL externalize the FIND_PACKAGE(OpenFLUID) calls
  # TOIMPL manage PARAMSUI_OPENFLUID_COMPONENTS
  # TOIMPL manage I18N_FILES_EXTRASCANS, maybe change name of variable
  # TOIMPL check management of I18N_LANGS

  _OPENFLUID_WAREPLUGIN_BUILD()

  IF(NOT DEFINED WARE_WITH_PARAMSUI)
    SET(WARE_WITH_PARAMSUI ON)
  ENDIF()

  IF(WARE_WITH_PARAMSUI)
    IF(_BUILDARGS_WITH_PARAMSUI AND _BUILDARGS_PARAMSUI_CPP_FILES)
      SET(OpenFLUID_COMPONENTS_FOUND OFF)
      SET(_BUILDARGS_CPP_FILES ${_BUILDARGS_PARAMSUI_CPP_FILES})
      SET(_BUILDARGS_FORTRAN_FILES)
      SET(_BUILDARGS_UI_FILES ${_BUILDARGS_PARAMSUI_UI_FILES})
      SET(_BUILDARGS_RC_FILES ${_BUILDARGS_PARAMSUI_RC_FILES})
      SET(_BUILDARGS_OPENFLUID_COMPONENTS ${_BUILDARGS_PARAMSUI_OPENFLUID_COMPONENTS})
      SET(_BUILDARGS_I18N_LANGS ${_BUILDARGS_PARAMSUI_I18N_LANGS})

      SET(_FORCE_PARAMSUI TRUE) # HACK see if better way to manage build of parameterization UI

      _OPENFLUID_WAREPLUGIN_BUILD()
    ENDIF()
  ENDIF()
ENDFUNCTION()


###########################################################################


# TOIMPL write doc
FUNCTION(OPENFLUID_ADD_WARETESTS)
  SET(_ARGS_OPTIONS "DISCOVER")
  SET(_ARGS_ONEVAL)
  SET(_ARGS_MULTIVAL "LIST")
  CMAKE_PARSE_ARGUMENTS(_TESTSARGS "${_ARGS_OPTIONS}" "${_ARGS_ONEVAL}" "${_ARGS_MULTIVAL}" ${ARGN})

  SET(_DATASETS)

  IF(_TESTSARGS_DISCOVER) # discover tests datasets (*.IN)
    FILE(GLOB _DATASETS RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} "*.IN")
  ELSE() # use provided list
    FOREACH(_DS ${_TESTSARGS_LIST})
      SET(_DATASETS ${_DATASETS} "${_DS}.IN")
    ENDFOREACH()
  ENDIF()

  SET(_TESTS_OUTPUT_DIR ${CMAKE_BINARY_DIR}/tests-output)
  FILE(MAKE_DIRECTORY "${_TESTS_OUTPUT_DIR}")

  IF(_DATASETS)
    MESSAGE(STATUS "Adding simulation tests")
  ENDIF()
  FOREACH(_CURRTEST ${_DATASETS})
    GET_FILENAME_COMPONENT(_TESTNAME ${_CURRTEST} NAME)
    ADD_TEST(NAME ${_CURRTEST}
            COMMAND "${OpenFLUID_CMD_PROGRAM}" "run"
                    "${CMAKE_CURRENT_SOURCE_DIR}/${_CURRTEST}"
                    "${_TESTS_OUTPUT_DIR}/${_TESTNAME}.OUT"
                    "-p" "${CMAKE_BINARY_DIR}"
                    "-n" "${CMAKE_BINARY_DIR}")
    MESSAGE(STATUS "  ${_CURRTEST}")
  ENDFOREACH()

ENDFUNCTION()
