/**

\page dev_space Handling space

\section spaceparsing_sec Parsing the spatial domain

The spatial domain is represented by units from different classes defined by the users.
Each unit carries its own information that can be exploited through accessor methods (see classes docs),
and also input data and simulation variables that can be exploited through special
methods (see \ref funcparams_sec and \ref propini_sec).\n  

The spatial domain can be parsed using the macros intended for handling spatial entities.\n

\subsection spaceparsingseq_ssec Sequential parsing

To parse units of a specific class, you can use the #OPENFLUID_UNITS_ORDERED_LOOP macro.\n 

To parse all units of the spatial domain, you can use the #OPENFLUID_ALLUNITS_ORDERED_LOOP macro.\n 

To parse a specific list of of \link openfluid::core::Unit Unit\endlink, you can use the #OPENFLUID_UNITSLIST_LOOP macro. 

\n
<i>Example:</i>
\n
\code
bool MyFunc::runStep(const openfluid::base::SimulationStatus* SimStatus)
{
  openfluid::core::Unit* SU;
  openfluid::core::Unit* UU;
  openfluid::core::Unit* UpSU;
  openfluid::core::UnitsPtrList_t* UpSUsList;
  openfluid::core::DoubleValue TmpValue;


  OPENFLUID_UNITS_ORDERED_LOOP("SU",SU)
  {
    UpSUsList = SU->getFromUnits("SU");

    OPENFLUID_UNITSLIST_LOOP(UpSUsList,UpSU)
    {
      OPENFLUID_GetVariable(UpSU,"water.surf.Q.downstream-su",SimStatus->getCurrentStep()-1,TmpValue);
    }
    
  }
  
  
  OPENFLUID_ALLUNITS_ORDERED_LOOP(10,UU)
  {  
    // do something here with UU pointer
  }
}
\endcode

\subsection spaceparsingthreaded_ssec Parallel parsing using multi-threading

To parse units of a specific class, you can use the #APPLY_UNITS_ORDERED_LOOP_THREADED which applies a given method of the simulation function to every unit of the given class. Extra arguments can be passed (see example below).\n 

To parse all units of the spatial domain, you can use the #APPLY_ALLUNITS_ORDERED_LOOP_THREADED which applies a given method of the simulation function to every unit of the graph. Extra arguments can be passed (see example below).\n

\n
<i>Example:</i>
\n
\code
void MyFunc::computeA(openfluid::core::Unit* aUnit)
{
 // compute something
 // use/produce variables
}


void MyFunc::computeB(openfluid::core::Unit* U,
                      const openfluid::base::SimulationStatus* SimStatus, 
                      const double Coeff)
{
 // compute something else, with extra args
 // use/produce variables
}


bool MyFunc::runStep(const openfluid::base::SimulationStatus* SimStatus)
{

  APPLY_UNITS_ORDERED_LOOP_THREADED("SU",MyFunc::computeA);
  APPLY_UNITS_ORDERED_LOOP_THREADED("TU",MyFunc::computeB, SimStatus, 2.5);
  
  APPLY_ALLUNITS_ORDERED_LOOP_THREADED(MyFunc::computeA);

}
\endcode


Please note:
<ul>
<li>If a spatial loop is used inside other spatial loop, it is recommended to use multi-threading in only one loop.
<li>In case of concurrent data access, it is strongly recommended to use mutex locks for thread safe data handling.
<li>Concurrent parsing using multi-threading should improve computing performance, reducing simulations durations.
But in case of very short computing durations, the cost of multi-threading management may nullify the speed improvements of concurrent computing. 

</ul>

\section spacemod_sec Modifying the spatial domain graph

The spatial domain graph can be defined statically through the input dataset.
It can also be defined and modified dynamically, during simulations, through primitives allowing to 
create and delete spatial units, and also to add and remove connections between these
spatial units.\n
For better use of simulation functions which modify the spatial domain graph, 
please fill the signature with the correct directives. See \ref signdatalandgraph_ssec signature.

\subsection spacemodunits_ssec Creating and deleting spatial units

Spatial units can be created and deleted dynamically, whenever during simulations. However, it is really 
tricky to perform it once the simulation has started (for modelling consistency reasons).

In order to create and delete units, you can use the following methods:
<ul>
<li>\link openfluid::base::PluggableFunction::OPENFLUID_AddUnit OPENFLUID_AddUnit \endlink
<li>\link openfluid::base::PluggableFunction::OPENFLUID_DeleteUnit OPENFLUID_DeleteUnit \endlink
</ul>

\subsection spacemodconns_ssec Adding and removing spatial connections

Connections between spatial units can be of two types:
<ul>
<li>"From-To" connections, linking spatial units topologically. These connections are usually "fluxes" connections.
<li>"Parent-Child" connections, linking units hierarchically.
</ul>

In order to add and remove connections, you can use the following methods, whenever during simulations:
<ul>
<li>\link openfluid::base::PluggableFunction::OPENFLUID_AddFromToConnection OPENFLUID_AddFromToConnection \endlink
<li>\link openfluid::base::PluggableFunction::OPENFLUID_AddChildParentConnection OPENFLUID_AddChildParentConnection \endlink
<li>\link openfluid::base::PluggableFunction::OPENFLUID_RemoveFromToConnection OPENFLUID_RemoveFromToConnection \endlink
<li>\link openfluid::base::PluggableFunction::OPENFLUID_RemoveChildParentConnection OPENFLUID_RemoveChildParentConnection \endlink
</ul>
\n
<i>Example:</i>
\n
\code
bool prepareData()
{

 /*
      TU.1         TU.2
        |            |
        -->  TU.22 <--
               |
               --> TU.18
                     |
          TU.52 --> OU.5 <-- OU.13
                     |
                     --> OU.25

       VU1 <-> VU2

   with:
   TU1, TU2, TU22, TU18 are children of VU1
   TU52, OU5, OU13, OU25 are children of VU2
*/

  OPENFLUID_AddUnit("VU",1,1);
  OPENFLUID_AddUnit("VU",2,2);
  OPENFLUID_AddUnit("TU",1,1);
  OPENFLUID_AddUnit("TU",2,1);
  OPENFLUID_AddUnit("TU",22,2);
  OPENFLUID_AddUnit("TU",18,3);
  OPENFLUID_AddUnit("TU",52,1);
  OPENFLUID_AddUnit("OU",5,4);
  OPENFLUID_AddUnit("OU",13,1);
  OPENFLUID_AddUnit("OU",25,5);

  OPENFLUID_AddFromToConnection("VU",1,"VU",2);
  OPENFLUID_AddFromToConnection("VU",2,"VU",1);
  OPENFLUID_AddFromToConnection("TU",1,"TU",22);
  OPENFLUID_AddFromToConnection("TU",2,"TU",22);
  OPENFLUID_AddFromToConnection("TU",22,"TU",18);
  OPENFLUID_AddFromToConnection("TU",18,"OU",5);
  OPENFLUID_AddFromToConnection("TU",52,"OU",5);
  OPENFLUID_AddFromToConnection("OU",13,"OU",5);
  OPENFLUID_AddFromToConnection("OU",5,"OU",25);

  OPENFLUID_AddChildParentConnection("TU",1,"VU",1);
  OPENFLUID_AddChildParentConnection("TU",2,"VU",1);
  OPENFLUID_AddChildParentConnection("TU",22,"VU",1);
  OPENFLUID_AddChildParentConnection("TU",18,"VU",1);
  OPENFLUID_AddChildParentConnection("TU",52,"VU",2);
  OPENFLUID_AddChildParentConnection("OU",5,"VU",2);
  OPENFLUID_AddChildParentConnection("OU",13,"VU",2);
  OPENFLUID_AddChildParentConnection("OU",25,"VU",2);
      
  return true;
}
\endcode

\subsection spacemodquery_ssec Querying the spatial domain graph

The spatial domain graph can be queried, whenever during simulations, in order to get
informations about spatial units and connections.

You can use the following methods:
<ul>
<li>\link openfluid::base::PluggableFunction::OPENFLUID_IsUnitExist OPENFLUID_IsUnitExist \endlink
<li>\link openfluid::base::PluggableFunction::OPENFLUID_IsUnitClassExist OPENFLUID_IsUnitClassExist \endlink
<li>\link openfluid::base::PluggableFunction::OPENFLUID_GetUnitsCount OPENFLUID_GetUnitsCount \endlink
<li>\link openfluid::base::PluggableFunction::OPENFLUID_IsUnitConnectedTo OPENFLUID_IsUnitConnectedTo \endlink
<li>\link openfluid::base::PluggableFunction::OPENFLUID_IsUnitConnectedFrom OPENFLUID_IsUnitConnectedFrom \endlink
<li>\link openfluid::base::PluggableFunction::OPENFLUID_IsUnitChildOf OPENFLUID_IsUnitChildOf \endlink
<li>\link openfluid::base::PluggableFunction::OPENFLUID_IsUnitParentOf OPENFLUID_IsUnitParentOf \endlink
</ul>

\subsection spacemodgen_ssec Generating spatial domain graphs automatically

Generators can help to automatically build a spatial domain graph, or to extend an existing one.\n
The following spatial domain generators are available:
<ul>
<li>\link openfluid::base::PluggableFunction::OPENFLUID_BuildUnitsMatrix OPENFLUID_BuildUnitsMatrix \endlink
</ul>

*/