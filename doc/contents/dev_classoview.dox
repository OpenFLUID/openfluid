/**

\page dev_classoview Simulation function C++ class 

A simulation function is defined by a class, inherited from the openfluid::base::PluggableFunction class.
The simulation code have to be written into the different methods provided by the \link openfluid::base::PluggableFunction PluggableFunction\endlink class.
You can also develop other methods in order to organize your source code.
To see how the C++ class structure of a simulation function, see part \ref emptyfunc.

\section splitconstruct_ssec Constructor and destructor

The constructor of the simulation function is called when the function is loaded. You may put here the initialization of your object attributes.\n
The destructor of the simulation function is called when the function is freed, at the end of the execution of the OpenFLUID application. You may put here instruction to free the memory you allocate for the needs of the simulation function (other objects, pointed vars, ...).

\section splitmethods_ssec Required methods to define

The class defining a simulation function must compound the following methods:
<ul>
<li>\link openfluid::base::PluggableFunction::initParams initParams \endlink
<li>\link openfluid::base::PluggableFunction::prepareData prepareData \endlink
<li>\link openfluid::base::PluggableFunction::checkConsistency checkConsistency \endlink
<li>\link openfluid::base::PluggableFunction::initializeRun initializeRun \endlink
<li>\link openfluid::base::PluggableFunction::runStep runStep \endlink
<li>\link openfluid::base::PluggableFunction::finalizeRun finalizeRun \endlink
</ul> 

The \link openfluid::base::PluggableFunction::initParams initParams \endlink method should be used to retreive function parameters, read from the model.fluidx file (See \ref funcparams_sec). Once read, the values should be stored into class attributes to be accessed by other methods.  

The \link openfluid::base::PluggableFunction::prepareData prepareData \endlink method should be used to do data pre-processing before the consistency checking.

The \link openfluid::base::PluggableFunction::checkConsistency checkConsistency \endlink method is called during the global consistency checking phase. It should be used to add function own consistency checking. 

The \link openfluid::base::PluggableFunction::initializeRun initializeRun \endlink method should be used to do data initialization, or to compute values that do not change during simulation.  

The \link openfluid::base::PluggableFunction::runStep runStep \endlink method is called at each exchange time step. It should contain the computation code.

The \link openfluid::base::PluggableFunction::finalizeRun finalizeRun \endlink method should be used to do post-processing after simulation. It is the last method ran.


*/