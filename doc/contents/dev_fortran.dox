/**

\page dev_fortran Fortran77/90 code integration



\section fortran_sec Calling Fortran source code

The C++ - Fortran interface is defined in the openfluid/tools/FortranCPP.hpp file.
In order to execute Fortran code from a simulation function, this Fortran source code have to be wrapped into a subroutine that will be called from the C++ code of the simulation function. To help programmers to achieve this wrapping operation, the FortranCPP.h file defines macros. These macros allows calls of Fortran77 and Fortran90 source code. You are invited to browse the FortranCPP.h file to get more information about these macros.\n


\n
<I>Fortran source code (FSubr.f90):</I>
\code
subroutine displayvector(Fsize,vect)

implicit none

integer Fsize,ifrom
real*8 vect(Fsize)

write(*,*) 'size',Fsize
write(*,*) (vect(i),i=1,Fsize)

return
end
\endcode
\n
<I>Declaration block int the .cpp file, located just after the function signature (MyFunc.cpp):</I>
\code
BEGIN_EXTERN_FORTRAN
  EXTERN_FSUBROUTINE(displayvector)(FINT *Size, FREAL8 *Vect);
END_EXTERN_FORTRAN
\endcode
\n
<I>Call of the fortran subroutine from the initializeRun method (MyFunc.cpp):</I>
\code

#include <openfluid/tools/FortranCPP.hpp>

bool MyFunction::initializeRun(const openfluid::base::SimulationInfo* SimInfo)
{
  openfluid::core::VectorValue MyVect;
  
  MyVect = openfluid::core::VectorValue(15,9);
  int Size = MyVect.getSize();

  CALL_FSUBROUTINE(displayvector)(&Size,(MyVect.getData()));

  return true;
}
\endcode

\n
The compilation and link of fortran source code is automatically done when adding fortran source files to the SIM_FORTRAN variable in the CMake.in.config file (See \ref devfuncemptyexample_ssec).
 
*/