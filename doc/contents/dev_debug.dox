/**

\page dev_debug Debugging macros

Debugging macros adds informations on standard output stream (usually displayed on screen). It allows developpers to trace various information during simulations.\n 
They are enabled only when debug build is enabled. They are ignored for other build types.\n 

In order to enable debug build mode, the option <tt>-DCMAKE_BUILD_TYPE=Debug</tt> must be added to the cmake command (e.g. <tt>cmake \<path to src\> -DCMAKE_BUILD_TYPE=Debug</tt>).
\verbatim
cmake .. -DCMAKE_BUILD_TYPE=Debug
\endverbatim
This debug build mode can be disabled using the release mode, with the option <tt>-DCMAKE_BUILD_TYPE=Release</tt>.\n
\n

The following macros are available for debugging:
<ul>
<li>#OFDBG_LOCATE for file/line location where the macro is called 
<li>#OFDBG_MESSAGE adding the message given as an argument 
<li>#OFDBG_UNIT for information about the unit given as an argument
<li>#OFDBG_UNIT_EXTENDED for extended information about the unit given as an argument
<li>#OFDBG_EVENT for information about the event given as an argument
<li>#OFDBG_EVENTCOLLECTION for information about the event collection given as an argument
</ul>
\n
<i>Example:</i>

\code
 bool runStep(const openfluid::base::SimulationStatus* SimStatus)
{
  openfluid::core::Unit* TU;
  openfluid::core::DateTime BeginDate,EndDate;
  openfluid::core::EventsCollection EvColl;

  OFDBG_LOCATE;

  BeginDate = SimStatus->getCurrentTime();
  EndDate = SimStatus->getCurrentTime() + SimStatus->getTimeStep() -1;


  OPENFLUID_UNITS_ORDERED_LOOP("TU",TU)
  {
     OFDBG_UNIT_EXTENDED(TU);    

     EvColl.clear();
     OPENFLUID_GetEvents(TU,BeginDate,EndDate,EvColl);
     OFDBG_EVENTCOLLECTION(EvColl);
  }

  return true;
}
\endcode


*/