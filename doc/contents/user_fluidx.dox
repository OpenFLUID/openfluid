/**

\page user_fluidx FluidX file format

This part of the manual describes the FluidX file(s) format. Refer to the "Usage"
part of this manual to run the simulation.

\section user_fluidx_overview Overview

The FluidX file format is an XML based format for OpenFLUID input file(s).
The OpenFLUID input information can be provided by a one or many files using
the FluidX format.

Whatever the input information is put into one or many files, the following
sections must be defined in the input file set:
<ul>
  <li> The \a model section defined by the \c <model>} tag
  <li> The <i>spatial domain</i> section defined by the \c <domain> tag
  <li> The <i>run configuration</i> section defined by the \c <run> tag
  <li> The <i>outputs configuration</i> section defined by the \c <output> tag  
</ul>
The order of the sections is not significant. All of these sections must be
inclosed into an \a openfluid section defined by the \c <openfluid>
tag.

\n

Summary view of the XML tree for FluidX files:
\code
<?xml version="1.0" standalone="yes"?>
<openfluid>

  <model>
    <!-- here is the model definition -->
  </model>

  <domain>
    <!-- here is the spatial domain definition, associated data and events -->   
  </domain>

  <output>
    <!-- here is the output configuration -->
  </output>

  <run>
    <!-- here is the run configuration -->
  </run>

</openfluid>
\endcode


\section user_fluidx_sections Sections


\subsection user_fluidx_sections_model Model

The flux model is defined by an ordered set of data generators and simulations
functions that will be plugged to the OpenFLUID. It defines the model
for the simulation. It can also include a global parameters section which
applies to all simulation functions and generators. The global parameters may
be overridden by local parameters of simulation functions or generators.



The flux model must be defined in a section delimited by the
\c <model> tag, and must be structured following these rules:
<ul>
  <li> Inside the \c <model>} tag, there must be a set of
  \c <function>}, \c <generator>} and \c <gparams>} tags
  <li> Each \c <function>} tag must bring a \c fileID} attribute giving
  the identifier of the simulation function; the value of the \c fileID}
  attribute must match the file name (without extension) of a reachable and
  pluggable simulation function.
  <li> Each \c <function>} tag may include zero to many \c <param>} tags giving
  parameters to the function. Each \c <param>} tag must bring a \c name} attribute giving
  the name of the parameter and a \c value} attribute giving the value of the parameter. These parameters can be scalar or vector of integer values, floating point values, string values. In case of vector, the values of the vector are separated by a ; (semicolon).
  <li> Each \c <generator>} tag must bring a \c varname} attribute giving 
  the name of the produced variable, a \c unitclass} attribute giving the 
  unit class of the produced variable, a \c method} attribute giving the 
  method used to produce the variable (\c fixed} for constant value,
  \c random} for random value in a range, \c interp} for a time-interpolated
  value from given data series, \c inject} for an
  injected value -no time interpolation- from given data series). An optional \c <varsize>}
  attribute can be set in order to produce a vector variable instead of a scalar variable.
  <li> Each \c <generator>} tag may include zero to many \c <param>}
  tags giving parameters to the generator. Each \c <param>} tag must bring
  a \c name} attribute giving the name of the parameter and a \c value} 
  attribute giving the value of the parameter.
  <li> A generator using the \c fixed} method must provide a
  param named \c fixedvalue} for the value to produce.
  <li> A generator using the \c random} method must provide a
  param named \c min} and a param named \c max} delimiting the
  random range for the value to produce.
  <li> A generator using the \c interp} method must provide a
  param named \c sources} giving the data sources filename and a param
  named \c distribution} giving the distribution filename for the value to
  produce (see appendix).
  <li> A generator using the \c inject} method must provide a
  param named \c sources} giving the data sources filename and a param
  named \c distribution} giving the distribution filename for the value to
  produce (see appendix).  
  <li> Each \c <gparams>} tag may include zero to many \c <param>}
  tags giving the global parameters. Each \c <param>} tag
  must bring a \c name} attribute giving the name of the parameter and a \c value} 
  attribute giving the value of the parameter.
</ul>

\code
<?xml version="1.0" standalone="yes"?>
<openfluid>
  <model>

    <gparams>
      <param name="gparam1" value="100" />
      <param name="gparam2" value="0.1" />
    </gparams>

    <function fileID="example.functionA" />

    <generator varname="example.generator.fixed" unitclass="EU1" method="fixed" varsize="11">
      <param name="fixedvalue" value="20" />
    </generator>

    <generator varname="example.generator.random" unitclass="EU2" method="random">
      <param name="min" value="20.53" />
      <param name="max" value="50" />
    </generator>

    <function fileID="example.functionB">
      <param name="param1" value="strvalue" />
      <param name="param2" value="1.1" />
      <param name="gparam1" value="50" />
    </function>

  </model>
</openfluid>
\endcode

\warning There must be only one model definition in the input dataset.

\warning The order of the simulation functions and data generators in the \c <model> section is very important : the same order will be used for execution on the same time step




\subsection user_fluidx_sections_spatialdomain Spatial domain

\subsubsection user_fluidx_sections_spatialdomain_def Definition and relationships

The spatial domain is defined by a set of spatial units that are connected each others.
These spatial units are defined by a numerical identifier (ID) and a class.
They also include information about the processing order of the unit in the class.
Each unit can be connected to zero or many other units from the same or a different unit class.\\
\noindent The spatial domain definition must be defined in a section delimited
by the \c <definition>} tag, which is a sub-section of the \c domain}
tag, and must be structured following these rules:
<ul>
  <li> Inside the \c <definition>} tag, there must be a set of
  \c <unit>} tags
  <li> Each \c <unit>} tag must bring an \c ID} attribute giving
  the identifier of the unit, a \c class} attribute giving the class of
  the unit, a \c pcsorder} attribute giving the process order in the
  class of the unit
  <li> Each \c <unit>} tag may include zero or many \c <to>} tags giving
  the outgoing connections to other units. Each \c <to>} tag must bring an
  \c ID} attribute giving the identifier of the connected unit and a
  \c class} attribute giving the class of the connected unit
  <li> Each \c <unit>} tag may include zero or many \c <childof>}
  tags giving the parent units. Each \c <childof>} tag must bring an
  \c ID} attribute giving the identifier of the parent unit and a
  \c class} attribute giving the class of the parent unit   
</ul>

\code
<?xml version="1.0" standalone="yes"?>
<openfluid>
  <domain>
    <definition>

      <unit class="PU" ID="1" pcsorder="1" />

      <unit class="EU1" ID="3" pcsorder="1">
        <to class="EU1" ID="11" />
        <childof class="PU" ID="1" />
      </unit>
      
      <unit class="EU1" ID="11" pcsorder="3">
        <to class="EU2" ID="2" />
      </unit>
      
      <unit class="EU2" ID="2" pcsorder="1" />

    </definition>
  </domain>
</openfluid>
\endcode

\bigskip


\subsubsection user_fluidx_sections_spatialdomain_indata Input data

The spatial domain input data are static data brought by units, usually properties and initial conditions for each unit.\\
\noindent The spatial domain input data must be defined in a section delimited
by the \c <inputdata>} tag, which is a sub-section of the \c domain}
tag, and must be structured following these rules:
<ul>
  <li> The \c <inputdata>} tag must bring a \c unitclass}
  attribute giving the unit class to which input data must be attached, and a
  \c colorder} attribute giving the order of the contained column-formatted
  data
  <li> Inside the \c <inputdata>} tag, there must be the input data as 
  row-column text. As a rule, the first column is the ID of the unit in the class
  given through the the \c unitclass} attribute of \c <inputdata>}
  tag, the following columns are values following the column order given
  through the \c colorder} attribute of the \c <inputdata>} tag.
  Values for the data can be real, integer or string.
</ul>

\bigskip

\code
<?xml version="1.0" standalone="yes"?>
<openfluid>
  <domain>
  
    <inputdata unitclass="EU1" colorder="indataA">
      3 1.1
      11 7.5
    </inputdata>

    <inputdata unitclass="EU2" colorder="indataB1;indataB3">
      2 18 STRVALX
    </inputdata>

  </domain>
</openfluid>
\endcode


\bigskip

\note Old inputdata format, with \c <columns>} and \c <data>  tags are still useable. However, you are encouraged to use the new FluidX file format.



\subsubsection user_fluidx_sections_spatialdomain_events Discrete events

The discrete events are events occuring on units, and that can be processed by simulation functions. 
\noindent The spatial events must be defined in a section delimited
by the \c <calendar>} tag, which is a sub-section of the \c domain}
tag, and must be structured following these rules:

<ul>
  <li> Inside the \c <calendar>} tag, there must be a set of \c <event>} tags 
  <li> Each \c <event>} tag must bring a \c unitID} and a 
  \c unitclass} attribute giving the unit on which occurs the event, a 
  \c date} attribute giving the date and time of the event. The date
  format must be "YYYY-MM-DD hh:mm:ss". The \c <event>} tag may bring a
  \c name} attribute and a a \c category} attribute, but they are
  actually ignored.
  <li> Each \c <event>} tag may include zero to many \c <info>} tags.
  <li> Each \c <info>} tag give information about the event and must
  bring a \c key} attribute giving the name (the "key") of the info, and a
  \c value} attribute giving the value for this key.
</ul>  
  
\code
<?xml version="1.0" standalone="yes"?>
<openfluid>
  <domain>
    <calendar>

      <event unitclass="EU1" unitID="11" date="1999-12-31 23:59:59">
        <info key="when" value="before" />
        <info key="where" value="1" />
        <info key="var1" value="1.13" />
        <info key="var2" value="EADGBE" />
      </event>
      <event unitclass="EU2" unitID="3" date="2000-02-05 12:37:51">
        <info key="var3" value="152.27" />
        <info key="var4" value="XYZ" />
      </event>
      <event unitclass="EU1" unitID="11" date="2000-02-25 12:00:00">
        <info key="var1" value="1.15" />
        <info key="var2" value="EADG" />
      </event>

    </calendar>
  </domain>
</openfluid>
\endcode




\subsection user_fluidx_sections_datastore Datastore

The datastore lists external data which is available during the simulation.\\
\noindent The datastore content must be defined in a section delimited by the
\c <datastore>} tag, and must be structured following these rules:
<ul>
  <li> Inside the \c <datastore>} tag, there must be a set of \c <dataitem>} tags
  <li> Each \c <dataitem>} tag must bring an \c id} attribute giving
  the unique identifier of the dataitem, a \c type} attribute giving the type
  of the dataitem (only the geovector type is usable right now), and a \c source} 
  attribute giving the source of the dataitem (only the geovector file path relative
  to the dataset is usable right now). An optional \c unitclass} 
  attribute is possible for giving the spatial unit class associated to the data. 
</ul>

\code
<?xml version="1.0" standalone="yes"?>
<openfluid>
  <datastore>
  
    <dataitem id="SUlayer" type="geovector" source="SU_wgs84.shp" unitclass="SU" />
    <dataitem id="Ground" type="geovector" source="data/ground.shp" />

  </datastore>
</openfluid>
\endcode



\subsection user_fluidx_sections_run Run configuration

The configuration of the simulation gives the simulation period, the data
exchange time step, and the optionnal progressive output parameters.\\
\noindent The run configuration must be defined in a section delimited by the
\c <run>} tag, and must be structured following these rules:
<ul>
  <li> Inside the \c <run>} tag, there must be a \c <deltat>} tag
  giving the data exchange time step (in seconds)
  <li> Inside the \c <run>} tag, there must be a \c <period>} tag
  giving the simulation period.
  <li> The \c <period>} tag must bring a \c begin} and an
  \c end} attributes, giving the dates of the beginning and the end of the
  simulation period. The dates formats for these attributes must be
  \c YYYY-MM-DD hh:mm:ss}
  <li> Inside the \c <run>} tag, there may be a \c <valuesbuffer>}
  tag for the number of time steps kept in memory. The number of step is given
  through a \c steps} attribute. If not present, all values are kept in memory.
  <li> Inside the \c <run>} tag, there may be a \c <filesbuffer>}
  tag for the size of the memory buffer for each file of results. The size is given
  in kilobytes through a \c kbytes} attribute. If not present, the default value 
  is 2KB.

</ul>

\code
<?xml version="1.0" standalone="yes"?>
<openfluid>
  <run>

    <deltat>3600</deltat>
    <period begin="2000-01-01 00:00:00" end="2000-03-27 01:12:37" />
    
    <valuesbuffer steps="10" />
    <filesbuffer kbytes="8" />
    
  </run>
</openfluid>
\endcode



\subsection user_fluidx_sections_outputs Outputs configuration

The configuration of the simulation outputs gives the description of the saved
results.\\
\noindent The outputs configuration must be defined in a section delimited by
the \c <output>} tag, and must be structured following these rules:
<ul>
  <li> Inside the \c <output>} tag, there must be one to many
  \c <files>} tags, defining files formats for saved data.
  <li> These \c <files>} tags must bring a \c colsep} attribute
  defining the separator strings between columns, a \c dtformat} attribute
  defining the date time format used (it could be \c 6cols}, \c iso}
  or user defined using strftime() format whis is described in the appendix
  part of this document), a \c commentchar} attribute defining the string
  prefixing lines of comments in output files. A \c header} attribute may
  be added giving the type of header in files. The values for this attribute can
  be \c none} for no header, \c info} for a header giving commented information
  about the data contained in the produced file(s), \c colnames-as-data} 
  for a first line in file giving names of each column, \c full} for 
  a complete header including both \c info} and \c colnames-as-data} headers 
  (see appendix for examples). If no \c header} attribute is present,
  \c info} header is used.
  <li> Inside the \c <files>} tags, there must be one to many
  \c <set>} tags. Each \c <set>} tag will lead to a set of files.
  <li> Each \c <set>} tag must bring a \c name} attribute defining
  the name of the set (this will be used as a suffix for generated output
  files), a \c unitsclass} attribute and a \c unitsIDs} attribute
  defining the processed units, a \c vars} attribute defining the
  processed variables. It may also bring an a \c precision} attribute
  giving the number of significant digits for the values in the outputs files.
  The IDs for the \c unitsIDs} attribute are semicolon-separated, the
  wildcard character ('*') can be used to include all units IDs for the given
  class. The variables names for the \c vars} attribute are
  semicolon-separated, the wildcard character ('*') can be used to include all
  variables for the given units class. The value for the \c precision} attribute
  must be $\geq$ 0. If not provided, the default value for the precision is 5.
</ul>


\code
<?xml version="1.0" standalone="yes"?>
<openfluid>
  <output>

    <files colsep=" " dtformat="%Y %m %d %H %M %S" commentchar="%">     
      <set name="testRS" unitsclass="RS" unitsIDs="51;232" vars="*" />
      <set name="full" unitsclass="SU" unitsIDs="*" vars="*" precision="7"/>
    </files>  

    <files colsep=" " dtformat="%Y-%m-%dT%H:%M:%S" commentchar="#" header="colnames-as-data">     
      <set name="full" unitsclass="SU" unitsIDs="*" vars="*" precision="7"/>
    </files>  


  </output>
</openfluid>
\endcode

*/