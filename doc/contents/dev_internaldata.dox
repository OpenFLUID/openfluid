/**

\page dev_internaldata Internal function status and data




\section persist_sec Persistance of simulation function status (internal data)

In order to keep the status of the simulation function between calls (from the a time step to the next one), internal variables can be stored as class attributes. The class attributes are persistant during the whole life of the simulation function.\n
To store distributed values, data structures are available to associate a unit ID to a value. These data structures exist for different types of data:   
<ul>
<li>\ref openfluid::core::IDFloatMap
<li>\ref openfluid::core::IDDoubleMap
<li>\ref openfluid::core::IDIntMap
<li>\ref openfluid::core::IDBoolMap
<li>\ref openfluid::core::IDDoubleValueMap
<li>\ref openfluid::core::IDVectorValueMap
<li>\ref openfluid::core::IDVectorValuePtrMap
</ul>


<i>declaration of the ID-map structure in the .h file :</i>
\code
class MyFunction : public openfluid::base::PluggableFunction
{
  private:

    openfluid::core::IDDoubleMap m_LastValue;

  public:
  
    // rest of the declaration of the class 

}
\endcode


<i>usage of the ID-map structure in the .cpp file :</i>
\code
bool MyFunction::runStep(const openfluid::base::SimulationStatus* SimStatus)
{
  int ID;
  double TmpValue;
  openfluid::core::Unit* SU;

  OPENFLUID_UNITS_ORDERED_LOOP("SU",SU)
  {

    ID = SU->getID();

    TmpValue = TmpValue + m_LastValue[ID]

    OPENFLUID_AppendVariable(SU,"MyVar",TmpValue);

    m_LastValue[ID] = TmpValue;

  }

  return true;
}
\endcode

 
*/