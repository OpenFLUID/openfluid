/**

\page dev_simdatavar Access to simulation parameters, input data, variables and events


\section funcparams_sec Access to function parameters

Functions parameters are passed through the model.fluidx file. They can be accessed in the source code from the \link openfluid::base::PluggableFunction::initParams initParams \endlink method of the simulation function, using \link openfluid::base::PluggableFunction::OPENFLUID_GetFunctionParameter OPENFLUID_GetFunctionParameter\endlink. The requested parameter name must be the same as the one used in the model.fluidx file.\n
\n
<i>model.fluidx file:</i>
\code
<?xml version="1.0" standalone="yes"?>
<openfluid>
  <model>
   
    <function fileID="myfunction">
      <param name="myparam" value="2" />          
    </function>
    
  </model>
</openfluid>            
\endcode
\n
<i>initParam method of the simulation function source code:</i>
\code
bool MyFunction::initParams(openfluid::core::FuncParamsMap_t Params)
{
  m_MyParam = 0; //default value
  OPENFLUID_GetFunctionParameter(Params,"myparam",m_MyParam);

  return true;
}
\endcode

To be reused in other part of the simulation function, the variable to store the value of function parameters should be declared as class variable. The parameters type can be string, double, integer, boolean, vector of string, vector of double, ... (see definitions of \link openfluid::base::PluggableFunction::OPENFLUID_GetFunctionParameter OPENFLUID_GetFunctionParameter \endlink to get more information about available types). 

\section vars_sec Access to simulation variables

The values for the simulation variables are attached to the homogeneous units.

\subsection varstype_ssec Types

The variables can be typed many defined types. See \link values Preliminary information about data types \endlink for more information. 

\subsection varsaccess_ssec Access

Many methods to access simulation variables exist, depending on the type you pass for the value:
<ul>
<li>\link openfluid::base::PluggableFunction::OPENFLUID_GetVariable OPENFLUID_GetVariable \endlink
<li>\link openfluid::base::PluggableFunction::OPENFLUID_AppendVariable OPENFLUID_AppendVariable \endlink
<li>\link openfluid::base::PluggableFunction::OPENFLUID_SetVariable OPENFLUID_SetVariable \endlink
<li>\link openfluid::base::PluggableFunction::OPENFLUID_IsVariableExist OPENFLUID_IsVariableExist \endlink
<li>\link openfluid::base::PluggableFunction::OPENFLUID_IsVariableExist OPENFLUID_IsTypedVariableExist \endlink
</ul>

They can be accessed only from the \link openfluid::base::PluggableFunction::runStep runStep \endlink method.
\n
\n
<i>Example:</i>
\n
\code
bool MyFunction::runStep(const openfluid::base::SimulationStatus* SimStatus)
{
  int CurrentStep;
  double TmpValue;
  openfluid::core::Unit* SU;

  CurrentStep = SimStatus->getCurrentStep();

  OPENFLUID_UNITS_ORDERED_LOOP("SU",SU)
  {
    OPENFLUID_GetVariable(SU,"MyVar",CurrentStep,TmpValue);
    TmpValue = TmpValue * 2;
    OPENFLUID_AppendVariable(SU,"MyVarX2",TmpValue);
  }
  
  return true;
}
\endcode


\section propini_sec Access to input data

In order to access to input data provided through standard input files, you can use the following methods.
They are usable from \link openfluid::base::PluggableFunction::initializeRun initializeRun\endlink, \link openfluid::base::PluggableFunction::runStep runStep\endlink, and \link openfluid::base::PluggableFunction::finalizeRun finalizeRun\endlink:  
<ul>
<li>\link openfluid::base::PluggableFunction::OPENFLUID_GetInputData OPENFLUID_GetInputData \endlink
<li>\link openfluid::base::PluggableFunction::OPENFLUID_SetInputData OPENFLUID_SetInputData \endlink
</ul>

The name of the accessed input data must match the name given in the standard input files.

\section events_sec Access to discrete events

A discrete event is defined in the class openfluid::core::Event. It is defined by a date and a list of key-value information that can be accessed by methods proposed by the openfluid::core::Event class.\n 
A collection of discrete events can be contained by an openfluid::core::EventsCollection class.\n
\n
To get a collection of events occuring during a period on a given unit, you should use the \link openfluid::base::PluggableFunction::OPENFLUID_GetEvents OPENFLUID_GetEvents \endlink method.
It returns an openfluid::core::EventsCollection that can be processed.\n
In order to process an event collection, you can parse it using specific macros:
<ul>
<li>#DECLARE_EVENT_COLLECTION_LOOP to declare a loop on an event collection,
<li>#BEGIN_EVENT_COLLECTION_LOOP to begin the loop,
<li>#END_LOOP to finish the loop.
</ul>
At each iteration, the current event can be processed.\n
\n
To add an event occuring on a specific \link openfluid::core::Unit Unit \endlink at specific date, you can use the
\link openfluid::base::PluggableFunction::OPENFLUID_AppendEvent OPENFLUID_AppendEvent \endlink method.\n

\n
<i>Example of process of events occurring on the current time step:</i>
\code
bool MyFunction::runStep(const openfluid::base::SimulationStatus* SimStatus)
{
  openfluid::core::Unit* SU;
  openfluid::core::EventCollection EvColl;
  openfluid::core::Event* Ev;
  std::list<openfluid::core::Event* > *EvList;
  openfluid::core::DateTime BTime, ETime;


  BTime = SimStatus->getCurrentTime();
  ETime = BTime + SimStatus->getTimeStep()-1;

  OPENFLUID_UNITS_ORDERED_LOOP("SU",SU)
  {

    EvColl.clear();

    OPENFLUID_GetEvents(SU,BTime,ETime,EvColl);
    EvList = EvColl.getEventsList();

    OPENFLUID_EVENT_COLLECTION_LOOP(EvColl.getEventsList(),Ev)
    {
      if (Ev->isInfoEquals("molecule","glyphosate"))
      {
        // process the event
      }
    }

  }

  return true;
}
\endcode

*/
