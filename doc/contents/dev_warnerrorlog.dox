/**

\page dev_warnerrorlog Logs, Warnings, Errors 


\section logmsgs_sec Log messages from simulation functions

Simulation functions can log messages to both console display and files using 
the \link openfluid::base::PluggableFunction::OPENFLUID_Logger OpenFLUID_Logger\endlink feature:
<ul>
<li>\link openfluid::base::StdoutAndFileOutputStream::getFile() OpenFLUID_Logger.getFile() \endlink
to log messages to file only
<li>\link openfluid::base::StdoutAndFileOutputStream::getStdout() OpenFLUID_Logger.getStdout() \endlink
to log messages to console only
<li>\link openfluid::base::StdoutAndFileOutputStream::get() OpenFLUID_Logger.get() \endlink
to log messages to file and console.
</ul>


The messages logged to files are put in a file named with the ID of the 
simulation function suffixed by .log, placed in the simulation output directory.


The OpenFLUID_Logger facility is the recommended way to log messages. Please avoid using std::cout
or similar C++ facilities.   

<i>Example:</i>

\code
 bool runStep(const openfluid::base::SimulationStatus* /*SimStatus*/)
{
  openfluid::core::Unit* TU;

  OPENFLUID_Logger.get() << "This is a message to both file and console" << std::endl;
  OPENFLUID_Logger.getFile() << "This is a message to file only" << std::endl;
  OPENFLUID_Logger.getStdout() << "This is a message to console only" << std::endl;

  OPENFLUID_UNITS_ORDERED_LOOP("TestUnits",TU)
  {
    OPENFLUID_Logger.get() << "TestUnits " << TU->getID() << std::endl;
  }

  return true;
}
\endcode


 

\section warnerr_sec Raise warnings and errors

In order to trace error and warnings during the run of a simulation, simulation 
functions can raise error and warning messages to inform the framework 
that something wrong or critical had happened. An error stops the simulation the 
next time the OpenFLUID framework take the control, a warning does 
not stop the simulation. Error and warnings are reported in the simulation report 
(siminfo.out file). They both can be dated with the number of the time step when the warning or error occurs. \n  

To raise a warning you can use \link openfluid::base::PluggableFunction::OPENFLUID_RaiseWarning OPENFLUID_RaiseWarning\endlink, to raise an error you can use \link openfluid::base::PluggableFunction::OPENFLUID_RaiseError OPENFLUID_RaiseError\endlink. \n

As already mentioned, an error stops the simulation the next time the framework takes control of the simulation.

<i>Example:</i>

\code
bool Myfunction::checkConsistency()
{
  double TmpValue;
  openfluid::core::Unit* SU;
    
  OPENFLUID_UNITS_ORDERED_LOOP("SU",SU)
  {
    OPENFLUID_GetInputData(SU,"MyVar",TmpValue);
    
    if (TmpValue <= 0)
    {
      OPENFLUID_RaiseError("my.function","Wrong value for the MyProp distributed property on SU");
      return false;
    }    
  }

  return true;
}

\endcode 




*/